from typing import Optional

from beanie import PydanticObjectId
from fastapi import Depends, Request, APIRouter, HTTPException
from fastapi_users import BaseUserManager, FastAPIUsers
from fastapi_users.authentication import (
    AuthenticationBackend,
    CookieTransport
)
from fastapi_users.authentication.strategy.db import AccessTokenDatabase, DatabaseStrategy
from fastapi_users_db_beanie import BeanieUserDatabase, ObjectIDIDMixin
from config.db import AccessToken, User, get_user_db, get_access_token_db

import os
from dotenv import load_dotenv

load_dotenv()
# Secret key is generated by using secrets.token_hex(32)
SECRET = os.getenv("SECRET_KEY")

router = APIRouter()

@router.get("/auth/verify-token")
async def verify_user_token(
    request: Request,
    access_token_db: AccessTokenDatabase[AccessToken] = Depends(get_access_token_db),
    user_db = Depends(get_user_db),
):
    # Extract session token from cookies
    session_token = request.cookies.get("session_token")
    if not session_token:
        raise HTTPException(status_code=401, detail="Token missing")

    # Find the token in the database
    token_entry = await access_token_db.get_by_token(session_token)
    if not token_entry:
        raise HTTPException(status_code=401, detail="Invalid token")

    # Get user details
    user = await user_db.get(PydanticObjectId(token_entry.user_id))
    if not user:
        raise HTTPException(status_code=401, detail="User not found")
    
    return {"message": "Token is valid", "user_id": str(user.id)}

class UserManager(ObjectIDIDMixin, BaseUserManager[User, PydanticObjectId]):
    reset_password_token_secret = SECRET
    verification_token_secret = SECRET

    async def on_after_register(self, user: User, request: Optional[Request] = None):
        print(f"User {user.id} has registered.")

    async def on_after_forgot_password(
        self, user: User, token: str, request: Optional[Request] = None
    ):
        print(f"User {user.id} has forgot their password. Reset token: {token}")

    async def on_after_request_verify(
        self, user: User, token: str, request: Optional[Request] = None
    ):
        print(f"Verification requested for user {user.id}. Verification token: {token}")


async def get_user_manager(user_db: BeanieUserDatabase = Depends(get_user_db)):
    yield UserManager(user_db)


cookie_transport = CookieTransport(cookie_name="session_token", cookie_max_age=3600, cookie_secure=True, cookie_httponly=True, cookie_samesite="strict")


def get_database_strategy(
    access_token_db: AccessTokenDatabase[AccessToken] = Depends(get_access_token_db),
) -> DatabaseStrategy:
    return DatabaseStrategy(access_token_db, lifetime_seconds=3600)


auth_backend = AuthenticationBackend(
    name="cookie",
    transport=cookie_transport,
    get_strategy=get_database_strategy,
)

fastapi_users = FastAPIUsers[User, PydanticObjectId](get_user_manager, [auth_backend])

current_active_user = fastapi_users.current_user(active=True)